import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--method', required=False, default='RR', help='input method')
params = parser.parse_args()
Atime  = (0,2,4,6,8)
Stime  = (3,6,4,5,2)
I = (0,1,2,3,4,5)
print("进程编号：     ",I)
print("进程到达时间:  ",Atime)



print("服务时间:     ",Stime)



def FCFS(Atime,Stime):
    Ctime = np.zeros(5)
    T = np.zeros(20)
    Ctime[0] = Stime[0]
    for i in range(4):Ctime[i+1] = max(Stime[i+1]+Ctime[i],Atime[i+1])
    print('完成时间：',Ctime)
    for i in range(20):
        if i<Ctime[0]:T[i]=0
        else:
            if i<Ctime[1]:T[i]=1
            else:
                if i<Ctime[2]:T[i]=2
                else:
                    if i<Ctime[3]:T[i]=3
                    else: T[i]=4
    T += 1
    print('每个时间执行进程号：',T)
    ZZtime = Ctime-Atime
    DQtime =ZZtime/Stime

    print('完成时间      ', Ctime)
    print('周转时间      ', ZZtime)
    print('带权周转时间   ', DQtime)

    return Ctime,T,ZZtime,DQtime


def RR(Atime,Stime):
    top = 0
    tail = 0
    r =0
    count = np.zeros(5)
    list = []
    T = np.zeros(20)
    Ctime = np.zeros(5)
    ZZtime = np.zeros(5)
    DQtime = np.zeros(5)

    for i in range(20):
        #print(list[tail].type())
        for j in range(5):
            if Atime[j]==i:
                list.append(j)
                tail +=1
        if r<tail-1:

            T[i] = list[r]
            count[list[r]]+=1

            if count[list[r]]==Stime[list[r]]:
                del list[r]
                tail-=1
            else:
                r = r + 1


        else:
            T[i] = list[r]
            count[list[r]] += 1

            if count[list[r]] == Stime[list[r]]:
                del list[r]
                tail -= 1

            r = 0

    for i in range(20):
        for j in range(5):
            if T[i]==j and i>Ctime[j]:
                Ctime[j]=i

    for i in range(5):

        ZZtime[i]=Ctime[i]-Atime[i]
        DQtime[i]=ZZtime[i]/Stime[i]

    print('完成时间      ', Ctime)
    print('周转时间      ', ZZtime)
    print('带权周转时间   ', DQtime)
    T +=1
    print('每个时间执行进程号：', T)

    return T


def HRN(Atime,Stime):

    Ctime = np.zeros(5)
    ZZtime= np.zeros(5)
    DQtime=np.zeros(5)
    H= np.zeros(5)
    T = np.zeros(20)

    l = np.zeros(5)



    for t in range(20):
        for i in range(5):
            H[i] = 1+(t-Atime[i])/Stime[i]
            if l[i]==1:H[i]=0
        if T[t]==0:
            m = np.where(H==np.max(H))[0][0]
            print(m)
            l[m]=1
            Ctime[m]=t +Stime[m]
            for j in range(Stime[m]):
                T[min(t+j,19)] =m+1
    for i in range(5):

        ZZtime[i]=Ctime[i]-Atime[i]
        DQtime[i]=ZZtime[i]/Stime[i]

    print('完成时间      ', Ctime)
    print('周转时间      ', ZZtime)
    print('带权周转时间   ', DQtime)

    print('每个时间执行进程号：', T)

    return T



def SJF(Atime,Stime):

    Ctime = np.zeros(5)
    ZZtime= np.zeros(5)
    DQtime=np.zeros(5)
    T = np.zeros(20)

    l = np.zeros(5)



    for t in range(20):
        if T[t]==0:
            for i in range(5):
                min_ = 100
                if  t>=Atime[i] and l[i]==0:
                    if Stime[i]<min_:
                        min_ = Stime[i]
                        T[t] = i+1
            for j in range(Stime[int(T[t]-1)]):
                T[min(t+j,19)] = T[t]
            l[int(T[t]-1)]=1

    for i in range(20):
        for j in range(5):
            if T[i] == j+1 and i > Ctime[j]:
                Ctime[j] = i

    for i in range(5):
        ZZtime[i] = Ctime[i] - Atime[i]
        DQtime[i] = ZZtime[i] / Stime[i]

    print('完成时间      ',Ctime)
    print('周转时间      ',ZZtime)
    print('带权周转时间   ',DQtime)

    print('每个时间执行进程号：', T)

    return T



if __name__=="__main__":

    m = params.method
    T = np.zeros(20)
    if params.method =='RR':
        T = RR(Atime,Stime)
    if params.method=='HRN':
        T =HRN(Atime,Stime)
    if params.method =='FCFS':
        T = FCFS(Atime,Stime)
    if params.method =='SJF':
        T =SJF(Atime,Stime)


    X = np.zeros(20)
    for i in range(20):
        X[i] = i
    fig = plt.figure()
    plt.bar(X, T, 0.4, color="green")
    plt.xlabel("Time")
    plt.ylabel("Number")

    plt.title(m)


    plt.show()
    plt.waitforbuttonpress()
    plt.close()


